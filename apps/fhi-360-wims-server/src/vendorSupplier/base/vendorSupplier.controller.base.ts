/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VendorSupplierService } from "../vendorSupplier.service";
import { VendorSupplierCreateInput } from "./VendorSupplierCreateInput";
import { VendorSupplier } from "./VendorSupplier";
import { VendorSupplierFindManyArgs } from "./VendorSupplierFindManyArgs";
import { VendorSupplierWhereUniqueInput } from "./VendorSupplierWhereUniqueInput";
import { VendorSupplierUpdateInput } from "./VendorSupplierUpdateInput";

export class VendorSupplierControllerBase {
  constructor(protected readonly service: VendorSupplierService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VendorSupplier })
  async createVendorSupplier(
    @common.Body() data: VendorSupplierCreateInput
  ): Promise<VendorSupplier> {
    return await this.service.createVendorSupplier({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        address: true,
        contactInfo: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VendorSupplier] })
  @ApiNestedQuery(VendorSupplierFindManyArgs)
  async vendorSuppliers(
    @common.Req() request: Request
  ): Promise<VendorSupplier[]> {
    const args = plainToClass(VendorSupplierFindManyArgs, request.query);
    return this.service.vendorSuppliers({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        address: true,
        contactInfo: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VendorSupplier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async vendorSupplier(
    @common.Param() params: VendorSupplierWhereUniqueInput
  ): Promise<VendorSupplier | null> {
    const result = await this.service.vendorSupplier({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        address: true,
        contactInfo: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VendorSupplier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVendorSupplier(
    @common.Param() params: VendorSupplierWhereUniqueInput,
    @common.Body() data: VendorSupplierUpdateInput
  ): Promise<VendorSupplier | null> {
    try {
      return await this.service.updateVendorSupplier({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          address: true,
          contactInfo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VendorSupplier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVendorSupplier(
    @common.Param() params: VendorSupplierWhereUniqueInput
  ): Promise<VendorSupplier | null> {
    try {
      return await this.service.deleteVendorSupplier({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          address: true,
          contactInfo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
