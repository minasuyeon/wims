/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VendorSupplier } from "./VendorSupplier";
import { VendorSupplierCountArgs } from "./VendorSupplierCountArgs";
import { VendorSupplierFindManyArgs } from "./VendorSupplierFindManyArgs";
import { VendorSupplierFindUniqueArgs } from "./VendorSupplierFindUniqueArgs";
import { CreateVendorSupplierArgs } from "./CreateVendorSupplierArgs";
import { UpdateVendorSupplierArgs } from "./UpdateVendorSupplierArgs";
import { DeleteVendorSupplierArgs } from "./DeleteVendorSupplierArgs";
import { VendorSupplierService } from "../vendorSupplier.service";
@graphql.Resolver(() => VendorSupplier)
export class VendorSupplierResolverBase {
  constructor(protected readonly service: VendorSupplierService) {}

  async _vendorSuppliersMeta(
    @graphql.Args() args: VendorSupplierCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VendorSupplier])
  async vendorSuppliers(
    @graphql.Args() args: VendorSupplierFindManyArgs
  ): Promise<VendorSupplier[]> {
    return this.service.vendorSuppliers(args);
  }

  @graphql.Query(() => VendorSupplier, { nullable: true })
  async vendorSupplier(
    @graphql.Args() args: VendorSupplierFindUniqueArgs
  ): Promise<VendorSupplier | null> {
    const result = await this.service.vendorSupplier(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VendorSupplier)
  async createVendorSupplier(
    @graphql.Args() args: CreateVendorSupplierArgs
  ): Promise<VendorSupplier> {
    return await this.service.createVendorSupplier({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => VendorSupplier)
  async updateVendorSupplier(
    @graphql.Args() args: UpdateVendorSupplierArgs
  ): Promise<VendorSupplier | null> {
    try {
      return await this.service.updateVendorSupplier({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VendorSupplier)
  async deleteVendorSupplier(
    @graphql.Args() args: DeleteVendorSupplierArgs
  ): Promise<VendorSupplier | null> {
    try {
      return await this.service.deleteVendorSupplier(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
