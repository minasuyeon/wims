/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, VendorSupplier as PrismaVendorSupplier } from "@prisma/client";

export class VendorSupplierServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VendorSupplierCountArgs, "select">
  ): Promise<number> {
    return this.prisma.vendorSupplier.count(args);
  }

  async vendorSuppliers(
    args: Prisma.VendorSupplierFindManyArgs
  ): Promise<PrismaVendorSupplier[]> {
    return this.prisma.vendorSupplier.findMany(args);
  }
  async vendorSupplier(
    args: Prisma.VendorSupplierFindUniqueArgs
  ): Promise<PrismaVendorSupplier | null> {
    return this.prisma.vendorSupplier.findUnique(args);
  }
  async createVendorSupplier(
    args: Prisma.VendorSupplierCreateArgs
  ): Promise<PrismaVendorSupplier> {
    return this.prisma.vendorSupplier.create(args);
  }
  async updateVendorSupplier(
    args: Prisma.VendorSupplierUpdateArgs
  ): Promise<PrismaVendorSupplier> {
    return this.prisma.vendorSupplier.update(args);
  }
  async deleteVendorSupplier(
    args: Prisma.VendorSupplierDeleteArgs
  ): Promise<PrismaVendorSupplier> {
    return this.prisma.vendorSupplier.delete(args);
  }
}
