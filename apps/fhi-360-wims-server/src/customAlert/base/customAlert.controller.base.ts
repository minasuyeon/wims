/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomAlertService } from "../customAlert.service";
import { CustomAlertCreateInput } from "./CustomAlertCreateInput";
import { CustomAlert } from "./CustomAlert";
import { CustomAlertFindManyArgs } from "./CustomAlertFindManyArgs";
import { CustomAlertWhereUniqueInput } from "./CustomAlertWhereUniqueInput";
import { CustomAlertUpdateInput } from "./CustomAlertUpdateInput";

export class CustomAlertControllerBase {
  constructor(protected readonly service: CustomAlertService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomAlert })
  async createCustomAlert(
    @common.Body() data: CustomAlertCreateInput
  ): Promise<CustomAlert> {
    return await this.service.createCustomAlert({
      data: {
        ...data,

        product: data.product
          ? {
              connect: data.product,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        alertType: true,
        active: true,
        threshold: true,

        product: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomAlert] })
  @ApiNestedQuery(CustomAlertFindManyArgs)
  async customAlerts(@common.Req() request: Request): Promise<CustomAlert[]> {
    const args = plainToClass(CustomAlertFindManyArgs, request.query);
    return this.service.customAlerts({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        alertType: true,
        active: true,
        threshold: true,

        product: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomAlert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customAlert(
    @common.Param() params: CustomAlertWhereUniqueInput
  ): Promise<CustomAlert | null> {
    const result = await this.service.customAlert({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        alertType: true,
        active: true,
        threshold: true,

        product: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomAlert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomAlert(
    @common.Param() params: CustomAlertWhereUniqueInput,
    @common.Body() data: CustomAlertUpdateInput
  ): Promise<CustomAlert | null> {
    try {
      return await this.service.updateCustomAlert({
        where: params,
        data: {
          ...data,

          product: data.product
            ? {
                connect: data.product,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          alertType: true,
          active: true,
          threshold: true,

          product: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomAlert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomAlert(
    @common.Param() params: CustomAlertWhereUniqueInput
  ): Promise<CustomAlert | null> {
    try {
      return await this.service.deleteCustomAlert({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          alertType: true,
          active: true,
          threshold: true,

          product: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
