/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomAlert } from "./CustomAlert";
import { CustomAlertCountArgs } from "./CustomAlertCountArgs";
import { CustomAlertFindManyArgs } from "./CustomAlertFindManyArgs";
import { CustomAlertFindUniqueArgs } from "./CustomAlertFindUniqueArgs";
import { CreateCustomAlertArgs } from "./CreateCustomAlertArgs";
import { UpdateCustomAlertArgs } from "./UpdateCustomAlertArgs";
import { DeleteCustomAlertArgs } from "./DeleteCustomAlertArgs";
import { Product } from "../../product/base/Product";
import { CustomAlertService } from "../customAlert.service";
@graphql.Resolver(() => CustomAlert)
export class CustomAlertResolverBase {
  constructor(protected readonly service: CustomAlertService) {}

  async _customAlertsMeta(
    @graphql.Args() args: CustomAlertCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomAlert])
  async customAlerts(
    @graphql.Args() args: CustomAlertFindManyArgs
  ): Promise<CustomAlert[]> {
    return this.service.customAlerts(args);
  }

  @graphql.Query(() => CustomAlert, { nullable: true })
  async customAlert(
    @graphql.Args() args: CustomAlertFindUniqueArgs
  ): Promise<CustomAlert | null> {
    const result = await this.service.customAlert(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomAlert)
  async createCustomAlert(
    @graphql.Args() args: CreateCustomAlertArgs
  ): Promise<CustomAlert> {
    return await this.service.createCustomAlert({
      ...args,
      data: {
        ...args.data,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CustomAlert)
  async updateCustomAlert(
    @graphql.Args() args: UpdateCustomAlertArgs
  ): Promise<CustomAlert | null> {
    try {
      return await this.service.updateCustomAlert({
        ...args,
        data: {
          ...args.data,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomAlert)
  async deleteCustomAlert(
    @graphql.Args() args: DeleteCustomAlertArgs
  ): Promise<CustomAlert | null> {
    try {
      return await this.service.deleteCustomAlert(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  async getProduct(
    @graphql.Parent() parent: CustomAlert
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
