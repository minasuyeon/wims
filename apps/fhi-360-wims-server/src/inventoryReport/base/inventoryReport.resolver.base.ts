/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InventoryReport } from "./InventoryReport";
import { InventoryReportCountArgs } from "./InventoryReportCountArgs";
import { InventoryReportFindManyArgs } from "./InventoryReportFindManyArgs";
import { InventoryReportFindUniqueArgs } from "./InventoryReportFindUniqueArgs";
import { CreateInventoryReportArgs } from "./CreateInventoryReportArgs";
import { UpdateInventoryReportArgs } from "./UpdateInventoryReportArgs";
import { DeleteInventoryReportArgs } from "./DeleteInventoryReportArgs";
import { InventoryReportService } from "../inventoryReport.service";
@graphql.Resolver(() => InventoryReport)
export class InventoryReportResolverBase {
  constructor(protected readonly service: InventoryReportService) {}

  async _inventoryReportsMeta(
    @graphql.Args() args: InventoryReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InventoryReport])
  async inventoryReports(
    @graphql.Args() args: InventoryReportFindManyArgs
  ): Promise<InventoryReport[]> {
    return this.service.inventoryReports(args);
  }

  @graphql.Query(() => InventoryReport, { nullable: true })
  async inventoryReport(
    @graphql.Args() args: InventoryReportFindUniqueArgs
  ): Promise<InventoryReport | null> {
    const result = await this.service.inventoryReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InventoryReport)
  async createInventoryReport(
    @graphql.Args() args: CreateInventoryReportArgs
  ): Promise<InventoryReport> {
    return await this.service.createInventoryReport({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => InventoryReport)
  async updateInventoryReport(
    @graphql.Args() args: UpdateInventoryReportArgs
  ): Promise<InventoryReport | null> {
    try {
      return await this.service.updateInventoryReport({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InventoryReport)
  async deleteInventoryReport(
    @graphql.Args() args: DeleteInventoryReportArgs
  ): Promise<InventoryReport | null> {
    try {
      return await this.service.deleteInventoryReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
