/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InventoryReportService } from "../inventoryReport.service";
import { InventoryReportCreateInput } from "./InventoryReportCreateInput";
import { InventoryReport } from "./InventoryReport";
import { InventoryReportFindManyArgs } from "./InventoryReportFindManyArgs";
import { InventoryReportWhereUniqueInput } from "./InventoryReportWhereUniqueInput";
import { InventoryReportUpdateInput } from "./InventoryReportUpdateInput";

export class InventoryReportControllerBase {
  constructor(protected readonly service: InventoryReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InventoryReport })
  async createInventoryReport(
    @common.Body() data: InventoryReportCreateInput
  ): Promise<InventoryReport> {
    return await this.service.createInventoryReport({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        reportType: true,
        generatedAt: true,
        details: true,
        emailPreference: true,
        printPreference: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InventoryReport] })
  @ApiNestedQuery(InventoryReportFindManyArgs)
  async inventoryReports(
    @common.Req() request: Request
  ): Promise<InventoryReport[]> {
    const args = plainToClass(InventoryReportFindManyArgs, request.query);
    return this.service.inventoryReports({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        reportType: true,
        generatedAt: true,
        details: true,
        emailPreference: true,
        printPreference: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InventoryReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async inventoryReport(
    @common.Param() params: InventoryReportWhereUniqueInput
  ): Promise<InventoryReport | null> {
    const result = await this.service.inventoryReport({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        reportType: true,
        generatedAt: true,
        details: true,
        emailPreference: true,
        printPreference: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InventoryReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInventoryReport(
    @common.Param() params: InventoryReportWhereUniqueInput,
    @common.Body() data: InventoryReportUpdateInput
  ): Promise<InventoryReport | null> {
    try {
      return await this.service.updateInventoryReport({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          reportType: true,
          generatedAt: true,
          details: true,
          emailPreference: true,
          printPreference: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InventoryReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInventoryReport(
    @common.Param() params: InventoryReportWhereUniqueInput
  ): Promise<InventoryReport | null> {
    try {
      return await this.service.deleteInventoryReport({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          reportType: true,
          generatedAt: true,
          details: true,
          emailPreference: true,
          printPreference: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
