/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { EquipmentLoanForm } from "./EquipmentLoanForm";
import { EquipmentLoanFormCountArgs } from "./EquipmentLoanFormCountArgs";
import { EquipmentLoanFormFindManyArgs } from "./EquipmentLoanFormFindManyArgs";
import { EquipmentLoanFormFindUniqueArgs } from "./EquipmentLoanFormFindUniqueArgs";
import { DeleteEquipmentLoanFormArgs } from "./DeleteEquipmentLoanFormArgs";
import { EquipmentLoanFormService } from "../equipmentLoanForm.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EquipmentLoanForm)
export class EquipmentLoanFormResolverBase {
  constructor(
    protected readonly service: EquipmentLoanFormService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EquipmentLoanForm",
    action: "read",
    possession: "any",
  })
  async _equipmentLoanFormsMeta(
    @graphql.Args() args: EquipmentLoanFormCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EquipmentLoanForm])
  @nestAccessControl.UseRoles({
    resource: "EquipmentLoanForm",
    action: "read",
    possession: "any",
  })
  async equipmentLoanForms(
    @graphql.Args() args: EquipmentLoanFormFindManyArgs
  ): Promise<EquipmentLoanForm[]> {
    return this.service.equipmentLoanForms(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EquipmentLoanForm, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EquipmentLoanForm",
    action: "read",
    possession: "own",
  })
  async equipmentLoanForm(
    @graphql.Args() args: EquipmentLoanFormFindUniqueArgs
  ): Promise<EquipmentLoanForm | null> {
    const result = await this.service.equipmentLoanForm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EquipmentLoanForm)
  @nestAccessControl.UseRoles({
    resource: "EquipmentLoanForm",
    action: "delete",
    possession: "any",
  })
  async deleteEquipmentLoanForm(
    @graphql.Args() args: DeleteEquipmentLoanFormArgs
  ): Promise<EquipmentLoanForm | null> {
    try {
      return await this.service.deleteEquipmentLoanForm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
