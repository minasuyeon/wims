/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApplicationUserService } from "../applicationUser.service";
import { ApplicationUserCreateInput } from "./ApplicationUserCreateInput";
import { ApplicationUser } from "./ApplicationUser";
import { ApplicationUserFindManyArgs } from "./ApplicationUserFindManyArgs";
import { ApplicationUserWhereUniqueInput } from "./ApplicationUserWhereUniqueInput";
import { ApplicationUserUpdateInput } from "./ApplicationUserUpdateInput";

export class ApplicationUserControllerBase {
  constructor(protected readonly service: ApplicationUserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApplicationUser })
  async createApplicationUser(
    @common.Body() data: ApplicationUserCreateInput
  ): Promise<ApplicationUser> {
    return await this.service.createApplicationUser({
      data: {
        ...data,

        role: data.role
          ? {
              connect: data.role,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
        email: true,
        username: true,

        role: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApplicationUser] })
  @ApiNestedQuery(ApplicationUserFindManyArgs)
  async applicationUsers(
    @common.Req() request: Request
  ): Promise<ApplicationUser[]> {
    const args = plainToClass(ApplicationUserFindManyArgs, request.query);
    return this.service.applicationUsers({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
        email: true,
        username: true,

        role: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApplicationUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async applicationUser(
    @common.Param() params: ApplicationUserWhereUniqueInput
  ): Promise<ApplicationUser | null> {
    const result = await this.service.applicationUser({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
        email: true,
        username: true,

        role: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApplicationUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApplicationUser(
    @common.Param() params: ApplicationUserWhereUniqueInput,
    @common.Body() data: ApplicationUserUpdateInput
  ): Promise<ApplicationUser | null> {
    try {
      return await this.service.updateApplicationUser({
        where: params,
        data: {
          ...data,

          role: data.role
            ? {
                connect: data.role,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          password: true,
          email: true,
          username: true,

          role: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApplicationUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApplicationUser(
    @common.Param() params: ApplicationUserWhereUniqueInput
  ): Promise<ApplicationUser | null> {
    try {
      return await this.service.deleteApplicationUser({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          password: true,
          email: true,
          username: true,

          role: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
