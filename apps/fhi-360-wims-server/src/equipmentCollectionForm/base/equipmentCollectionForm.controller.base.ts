/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { EquipmentCollectionFormService } from "../equipmentCollectionForm.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { EquipmentCollectionFormCreateInput } from "./EquipmentCollectionFormCreateInput";
import { EquipmentCollectionForm } from "./EquipmentCollectionForm";
import { EquipmentCollectionFormFindManyArgs } from "./EquipmentCollectionFormFindManyArgs";
import { EquipmentCollectionFormWhereUniqueInput } from "./EquipmentCollectionFormWhereUniqueInput";
import { EquipmentCollectionFormUpdateInput } from "./EquipmentCollectionFormUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class EquipmentCollectionFormControllerBase {
  constructor(
    protected readonly service: EquipmentCollectionFormService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EquipmentCollectionForm })
  @nestAccessControl.UseRoles({
    resource: "EquipmentCollectionForm",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createEquipmentCollectionForm(
    @common.Body() data: EquipmentCollectionFormCreateInput
  ): Promise<EquipmentCollectionForm> {
    return await this.service.createEquipmentCollectionForm({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [EquipmentCollectionForm] })
  @ApiNestedQuery(EquipmentCollectionFormFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EquipmentCollectionForm",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async equipmentCollectionForms(
    @common.Req() request: Request
  ): Promise<EquipmentCollectionForm[]> {
    const args = plainToClass(
      EquipmentCollectionFormFindManyArgs,
      request.query
    );
    return this.service.equipmentCollectionForms({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EquipmentCollectionForm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EquipmentCollectionForm",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async equipmentCollectionForm(
    @common.Param() params: EquipmentCollectionFormWhereUniqueInput
  ): Promise<EquipmentCollectionForm | null> {
    const result = await this.service.equipmentCollectionForm({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EquipmentCollectionForm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EquipmentCollectionForm",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateEquipmentCollectionForm(
    @common.Param() params: EquipmentCollectionFormWhereUniqueInput,
    @common.Body() data: EquipmentCollectionFormUpdateInput
  ): Promise<EquipmentCollectionForm | null> {
    try {
      return await this.service.updateEquipmentCollectionForm({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EquipmentCollectionForm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EquipmentCollectionForm",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteEquipmentCollectionForm(
    @common.Param() params: EquipmentCollectionFormWhereUniqueInput
  ): Promise<EquipmentCollectionForm | null> {
    try {
      return await this.service.deleteEquipmentCollectionForm({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
