/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  EquipmentCollectionForm as PrismaEquipmentCollectionForm,
} from "@prisma/client";

export class EquipmentCollectionFormServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EquipmentCollectionFormCountArgs, "select">
  ): Promise<number> {
    return this.prisma.equipmentCollectionForm.count(args);
  }

  async equipmentCollectionForms(
    args: Prisma.EquipmentCollectionFormFindManyArgs
  ): Promise<PrismaEquipmentCollectionForm[]> {
    return this.prisma.equipmentCollectionForm.findMany(args);
  }
  async equipmentCollectionForm(
    args: Prisma.EquipmentCollectionFormFindUniqueArgs
  ): Promise<PrismaEquipmentCollectionForm | null> {
    return this.prisma.equipmentCollectionForm.findUnique(args);
  }
  async createEquipmentCollectionForm(
    args: Prisma.EquipmentCollectionFormCreateArgs
  ): Promise<PrismaEquipmentCollectionForm> {
    return this.prisma.equipmentCollectionForm.create(args);
  }
  async updateEquipmentCollectionForm(
    args: Prisma.EquipmentCollectionFormUpdateArgs
  ): Promise<PrismaEquipmentCollectionForm> {
    return this.prisma.equipmentCollectionForm.update(args);
  }
  async deleteEquipmentCollectionForm(
    args: Prisma.EquipmentCollectionFormDeleteArgs
  ): Promise<PrismaEquipmentCollectionForm> {
    return this.prisma.equipmentCollectionForm.delete(args);
  }
}
