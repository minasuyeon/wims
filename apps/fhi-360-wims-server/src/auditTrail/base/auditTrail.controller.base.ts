/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AuditTrailService } from "../auditTrail.service";
import { AuditTrailCreateInput } from "./AuditTrailCreateInput";
import { AuditTrail } from "./AuditTrail";
import { AuditTrailFindManyArgs } from "./AuditTrailFindManyArgs";
import { AuditTrailWhereUniqueInput } from "./AuditTrailWhereUniqueInput";
import { AuditTrailUpdateInput } from "./AuditTrailUpdateInput";

export class AuditTrailControllerBase {
  constructor(protected readonly service: AuditTrailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AuditTrail })
  async createAuditTrail(
    @common.Body() data: AuditTrailCreateInput
  ): Promise<AuditTrail> {
    return await this.service.createAuditTrail({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        action: true,
        timestamp: true,
        details: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AuditTrail] })
  @ApiNestedQuery(AuditTrailFindManyArgs)
  async auditTrails(@common.Req() request: Request): Promise<AuditTrail[]> {
    const args = plainToClass(AuditTrailFindManyArgs, request.query);
    return this.service.auditTrails({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        action: true,
        timestamp: true,
        details: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AuditTrail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async auditTrail(
    @common.Param() params: AuditTrailWhereUniqueInput
  ): Promise<AuditTrail | null> {
    const result = await this.service.auditTrail({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        action: true,
        timestamp: true,
        details: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AuditTrail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAuditTrail(
    @common.Param() params: AuditTrailWhereUniqueInput,
    @common.Body() data: AuditTrailUpdateInput
  ): Promise<AuditTrail | null> {
    try {
      return await this.service.updateAuditTrail({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          action: true,
          timestamp: true,
          details: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AuditTrail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAuditTrail(
    @common.Param() params: AuditTrailWhereUniqueInput
  ): Promise<AuditTrail | null> {
    try {
      return await this.service.deleteAuditTrail({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          action: true,
          timestamp: true,
          details: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
