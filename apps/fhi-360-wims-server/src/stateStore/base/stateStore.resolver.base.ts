/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StateStore } from "./StateStore";
import { StateStoreCountArgs } from "./StateStoreCountArgs";
import { StateStoreFindManyArgs } from "./StateStoreFindManyArgs";
import { StateStoreFindUniqueArgs } from "./StateStoreFindUniqueArgs";
import { CreateStateStoreArgs } from "./CreateStateStoreArgs";
import { UpdateStateStoreArgs } from "./UpdateStateStoreArgs";
import { DeleteStateStoreArgs } from "./DeleteStateStoreArgs";
import { WarehouseFindManyArgs } from "../../warehouse/base/WarehouseFindManyArgs";
import { Warehouse } from "../../warehouse/base/Warehouse";
import { StateStoreService } from "../stateStore.service";
@graphql.Resolver(() => StateStore)
export class StateStoreResolverBase {
  constructor(protected readonly service: StateStoreService) {}

  async _stateStoresMeta(
    @graphql.Args() args: StateStoreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StateStore])
  async stateStores(
    @graphql.Args() args: StateStoreFindManyArgs
  ): Promise<StateStore[]> {
    return this.service.stateStores(args);
  }

  @graphql.Query(() => StateStore, { nullable: true })
  async stateStore(
    @graphql.Args() args: StateStoreFindUniqueArgs
  ): Promise<StateStore | null> {
    const result = await this.service.stateStore(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StateStore)
  async createStateStore(
    @graphql.Args() args: CreateStateStoreArgs
  ): Promise<StateStore> {
    return await this.service.createStateStore({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StateStore)
  async updateStateStore(
    @graphql.Args() args: UpdateStateStoreArgs
  ): Promise<StateStore | null> {
    try {
      return await this.service.updateStateStore({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StateStore)
  async deleteStateStore(
    @graphql.Args() args: DeleteStateStoreArgs
  ): Promise<StateStore | null> {
    try {
      return await this.service.deleteStateStore(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Warehouse], { name: "warehouses" })
  async findWarehouses(
    @graphql.Parent() parent: StateStore,
    @graphql.Args() args: WarehouseFindManyArgs
  ): Promise<Warehouse[]> {
    const results = await this.service.findWarehouses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
